# -----------------------------------------------------------------------------
#      This is a prober specific configuration file for prober drivers
#         (c) Copyright Advantest 2015
# -----------------------------------------------------------------------------
# The general syntax of this file is:
#
#       file           = definitionlist
#
#       definitionlist = definition [definitionlist]
#
#       definition     = [hint] key [flags] data
#
#       key            = string ':'
#
#       data           = array | simple_data
#
#       simple_data    = number | quoted_string
#
#       quoted_string  = '"' string '"' | ''' string '''
#
#       array          = '[' datalist ']'
#
#       datalist       =  data [datalist]
#
#       hint           = '{' string '}'
#
#       flags          = '<' characterlist '>'
#
#       characterlist  = character [characterlist]
#
#       string         = alphanumeric string
#
#       number         = any floating point number
#
#       character      = 'F'
#
# Everything following a '#' character up to the end of the line, is 
# treated as a comment. A '#' within a string is handled correctly
# as part of the string.
#
# A <hint> group (several continuous lines) immediately preceding a 
# <definition> is used as a hint for this definition and will occur
# as tooltip in a user interface to give some advise for possible
# changes.
#
#           For a detailed description please refer to the document
#                     "Prober/Handler Drivers"
# -----------------------------------------------------------------------------



# Parameters for Equipment Identification -------------------------------------


# The name of the prober family, as accepted by the plug-in.

{ The name of the prober family }

prober_family: < F >                    "TEL"

# The name of the specific prober model within the prober family, as
# accepted by the plug-in

{ The name of the prober model }

model: < F >                            "P-8"


# Parameters for Log File Generation ------------------------------------------


# In addition to printing messages to the Report Window, the driver
# can also write these messages to a file.  If the following value is
# not an empty string, it is treated as a log file for driver
# messages. Environment variable substitution in the path definition
# works.

{ The location of the drivers message log file }

driver_message_log:                     "/opt/hp93000/testcell/phcontrol/log/messages"

# For debugging purposes, the driver may generate more or less detailed
# messages. The level of details is defined by this parameter.  If not
# specified differently in the attributes definition, the parameter
# settings -1 (no messages) ... 4 (highest detail) or 9 are valid.
# debug level 9 will output highest detail (4), plus the time stamp

{ The debug level of the driver }

debug_level:                            0

# In addition to printing warnings and errors to the Report Window,
# the driver can also write these to a file. Also `trace' information
# will be written to this file. If the following value is not an empty
# string, it is treated as an additional log file for errors and
# warnings. Environment variable substitution in the path definition
# works.

{ The location of the drivers error log file }

driver_error_log:                       "/opt/hp93000/testcell/phcontrol/log/errors"

# The messages and warnings/errors log files generated by the driver
# may be kept or overwritten with each start-up of the driver (each
# testprogram run), or with each change of one of the parameters
# driver_message_log or driver_error_log. This parameter sets the
# number of old log files to be kept by renaming the files following
# the scheme:
#
# file -> file_old_1 -> file_old_2 -> file_old_3 -> ... 
# -> file_old_<log_files_to_keep>

{ How many old log files with similar names to keep, default: 0 }

log_files_to_keep: < F >                0

# The driver may log the contents of the driver configuration file which
# was loaded at driver start-up to the message log output.  If set to
# "yes", this configuration will be logged at the ph_driver_start call
# from the test cell client.

{ Log configuration to the message log file, default: "no" }

log_configuration: < F >                "yes"

# If set to "yes", the driver will add internal function calls
# together with the passed parameters to the warnings/error
# output. This should be used for debugging only.

{ Trace driver internal function calls, default: "no" }

trace_driver_calls:                     "no"


# Parameters for Driver Mode --------------------------------------------------


# For demonstrations, debug scenarios, and problem analysis, the
# driver may work in "off-line" mode rather then in "on-line"
# mode. During off-line mode, no communication with the equipment
# takes place. Instead, the equipment's behavior is simulated to the
# driver (error-free operation is simulated).

{ Interface communication mode, default: "on-line" }

communication_mode: < F >               "on-line"

# Sometimes it is necessary to slow down all driver operations, for
# example when testing a new test cell client, or when analyzing a
# malfunction. This parameter sets the driver to the single step
# mode. In single step mode the operator is prompted for confirmation
# at each call from the test cell client to the prober driver.

{ Activate singel step mode, default: "off" }

single_step_mode:                       "off"


# Parameters for Operator interventions ---------------------------------------


# At driver startup, the operator may be asked to confirm the current
# configuration. If the operator confirms the configuration, handling
# operation will start. Otherwise, the testprogram will be
# aborted. The driver will only ask for configuration confirmation, if
# also the parameter log_configuration is set to "yes". This prints
# the current configuration file to the report window, and this way
# allows the operator to check the configuration before confirming it.

{ Ask for confirmation of the configuration at driver startup, default: "no" }

ask_for_configuration_confirmation: < F > "no"

# If a timeout occurs while the driver waits for the next part to be
# tested (next device from the handler, or next die on the wafer), the
# driver can ask the operator to take action ("operator-help"), or can
# continue waiting for parts ("continue"). In the latter case, the
# driver will stop waiting only if a new part is delivered by the
# handler or prober (and the delivery is recognized).

{ What should happen, if a timeout occurs while waiting for parts,
  default: "continue" }

waiting_for_parts_timeout_action:       "continue"

# The time in seconds which the driver will wait for a new part (for
# handlers: the next device; for probers: the next die) from the
# equipment. If this time is exceeded (timeout), a message will be
# generated by the driver, and the action defined by the parameter
# waiting_for_parts_timeout_action will be taken.

{ Timeout in [seconds] to probe a die, default: 30 }

waiting_for_parts_timeout:              30

# These parameters work exactly like waiting_for_parts_timeout_action,
# but for timeouts while the driver waits for the next wafer to be
# delivered by the prober.

{ What should happen, if a timeout occurs while waiting for wafers,
  default: "continue" }

waiting_for_wafer_timeout_action:       "continue"

# The time in seconds which the driver will wait for a new wafer to be
# inserted by the prober. If this time is exceeded (timeout), a message
# will be generated by the driver, and the action defined by the
# parameters waiting_for_wafer_timeout_action will be taken.

{ Timeout in [seconds] to provide a wafer, default: 120 }

waiting_for_wafer_timeout:              240

# These parameters work exactly like waiting_for_parts_timeout_action,
# but for timeouts while the driver waits for the next cassette to be
# delivered by the prober.

{ What should happen, if a timeout occurs while waiting for cassettes,
  default: "continue" }

waiting_for_cassette_timeout_action:    "continue"

# The time in seconds which the driver will wait for a new cassette from
# the equipment. If this time is exceeded (timeout), a message will be
# generated by the driver, and the action defined by the parameter
# waiting_for_wafer_timeout_action will be taken.

{ Timeout in [seconds] to proviude a cassette, default: 120 }

waiting_for_cassette_timeout:           300

# The time in seconds which the driver will wait for a new lot to
# be started by the prober. If this time is exceeded (timeout), a
# message will be generated by the driver, and the action defined by the
# parameters waiting_for_lot_timeout_action will be taken.

{ What should happen, if a timeout occurs while waiting for a lot start,
  default: "continue" }

waiting_for_lot_timeout_action:         "operator-help"

# The time in seconds which the driver will wait for the prober to
# report that a new lot is ready to be tested. Some probers send out a
# special signal in this situation. Other probers do not. In the
# case of a timeout, a message will be generated by the driver, and the
# action defined by the parameter waiting_for_lot_timeout_action will be
# taken (see above). If the action is "operator-help", the operator can
# tell the driver to proceed as if the signal had been received.  The
# exact implementation of this function is plug-in specific.

{ Timeout in [seconds] to start a new lot, default: 120 }

waiting_for_lot_timeout:                300

# If a timeout occurs while the driver waits for any signals from the
# equipment, other than waiting for parts, wafers, cassettes or lots,
# the driver can ask the operator to take action ("operator-help"), or
# can continue waiting for the current action to complete
# ("continue"). In the latter case, the driver will stop waiting only if
# the action is completed.

{ What should happen, if a general timeout occurs, default: "continue" }

general_timeout_action:                 "continue"

# The time in seconds which the driver will wait to receive any signal
# from the equipment, other than those signals for which the waiting
# time is defined by the parameters waiting_for_*_timeout (see
# above). The parameter general_timeout, for example, applies to
# communication requests when setting up parameters of the prober,
# requesting values, pausing/unpausing, and asking for IDs.  If this
# time is exceeded (timeout), a message will be generated by the driver,
# and the action defined by the parameter general_timeout_action will be
# taken (see above).

{ Timeout in [seconds] to wait for completion of a general
  communication, default: 30 }

general_timeout:                        30

# This parameter determines whether the prober will be paused by the
# driver when the ph_pause_start() is called by TC-API PHSession::pause().
# Depending on the prober type, the driver will make the prober 
# leave the pause mode again, when the ph_pause_done() is called by
# TC-API PHSession::resume().

{ Do we stop the prober when PHSession::pause() is called, default: "no" }

stop_prober_on_smartest_pause:          "no"


# User Defined Dialog Box -----------------------------------------------------

# At certain key moments during the operation of the driver a configurable
# dialog box can be set to appear. The idea being that the operator may be
# prompted to perform some action to ensure the smooth operation of the
# prober/handler and the driver. For each user defined dialog box the
# following parameters may be defined:
#
# dialog_specific_key: [ "title" "message" "diag-format" "diag-freq" ]
#
# where:
#
# dialog_specific_key   is the configuration key value as defined below.
#                       For example, to make a user defined dialog box
#                       appear before any commmunication is sent to the
#                       prober/handler the "dialog_communication_start"
#                       key must be defined. If no such configuration key 
#                       value is defined the corresponding dialog box will
#                       not appear.
#
# "title"               is a user defined title or "standard" to display
#                       the default title.
#                       This parameter must be defined if the
#                       dialog_specific_key has been defined.
#
# "message"             is a user defined message or "standard" to display the
#                       default message.  Note that for a user defined message
#                       the '|' character can be used to create a new line in
#                       the message. See the example given below.
#
# "diag-format"         this parameter defines the button format of the dialog
#                       box and may be one of:
#                       "Quit-Cont"  for the two [ QUIT ] [ CONTINUE ] buttons
#                       "Cont"       for just the [ CONTINUE ] button
#                       This is an optional parameter, default "Quit-Cont".
#
# "diag-freq"           gives the frequency with which the dialog box should be
#                       displayed and may be one of:
#                       "never" for no dialog box to appear
#                       "once"  to appear only once
#                       "repeat" to always appear at the key moment defined by
#                       the dialog_specific_key
#                       This is an optional parameter, default "once".
#
# for example the following user defined dialog definition:
#
# dialog_communication_start: [ "Attention !" "Press Green button on XYZ prober.|Then press CONTINUE." "Cont" ]
#
# will mean the following dialog box
#
#           ============== Attention ! ==============
#           |                                       |
#           | Press Green button on XYZ prober.     |
#           | Then press CONTINUE.                  |
#           |                                       |
#           |             [ Continue ]              |
#           |                                       |
#           =========================================
#
#
# appears before any communication is sent to the prober/handler by the driver.
#



# User defined dialog box to appear before communication to the handler/
# prober starts. For details on how to set the parameters see the
# "User Defined Dialog" entry above. Note for the diag-freq setting
# "repeat" is not an allowable value.

{ User defined dialog box to be appear before any communication is sent to the
  prober/handler }

dialog_communication_start: < F >       [ "standard" "standard" "quit-cont" "never" ] 

# User defined dialog box to appear before any configuration values are
# sent to the handler/prober. For details on how to set the parameters see the
# "User Defined Dialog" entry above. Note for the diag-freq setting
# "repeat" is not an allowable value.

{ User defined dialog box to be appear before any configuration values are
  sent to the prober/handler }


dialog_configuration_start: < F >       [ "standard" "standard" "quit-cont" "never" ] 

# User defined dialog box to appear before the lot level is started.
# For details on how to set the parameters see the "User Defined Dialog"
# entry above.

{ User defined dialog box to be appear before the lot level is started }


dialog_lot_start: < F >                 [ "standard" "standard" "quit-cont" "never" ] 

# User defined dialog box to appear before the wafer level is started.
# For details on how to set the parameters see the "User Defined Dialog"
# entry above.

{ User defined dialog box to be appear before the wafer level is started }


dialog_wafer_start: < F >               [ "standard" "standard" "quit-cont" "never" ]


# Parameters for Interface Identification -------------------------------------


# Handlers or wafer probers may be connected through a GPIB, or
# LAN(TCP/IP) interface to the tester. (Some equipment even supports more
# than one interface type).  This parameter specifies the interface
# type used. "gpib" refers to a
# GPIB interface. "lan" refers to a LAN(TCP/IP) interface.

{ The prober interface type }

interface_type: < F >                   "gpib"

# The name of the interface device.
# For GPIB interface, this symbolic name is known to the standard instrument
# control library (SICL), whic is declared to the SICL through the iosetup(1)
# program and are stored in the file /etc/opt/sicl/hwconfig.cf.
# For LAN interface, the format of the symbolic interface looks like:
# "[TCP/UDP]/server_address/server_port"
# For example:
# 1. TCP/192.168.1.1/12345
# 2. UDP/192.168.1.1/12345
# 3. TCP/server_hostname/12345
# 4. UDP/server_hostname/12345

{ The name of the interface device }

symbolic_interface_name: < F >          "hpib"

# The GPIB port number of the prober or handler. This parameter is not required
# for LAN interface.

{ The GPIB port number of the prober or handler, no default }

gpib_port: < F >                        22

# In case a prober or handler generates SRQs on the GPIB interface,
# that are not expected by the driver plugin, the plugin usually stops
# operation and the driver fails. This happens to ensure that the
# driver plugin is always synchronized with the equipment state. In
# case of an incomplete plugin implementation, it may happen that some
# SRQs are not handled correctly. To avoid time loss due to bug
# reports and new driver releases at production sites, this
# configuration parameters allows to ignore certain SRQs in
# general.
#
# Warning: Each given SRQ value in the list will be
# completely ignored. If SRQs are entered, that are needed by the
# driver plugin in some situations but should be ignored in other
# situations, this parameter can not be used.
#
# In case this parameter is used, a report should be send to your 
# Advantest representative to help improve future driver plugin 
# releases. 

{ A list of SQRs to be completely ignored by the driver plugin, 
  default empty list }

ignored_SRQs: < F >                     [ ]


# Parameters for Site Management ----------------------------------------------


# Specifies the number of sites of the prober, and the ID of each
# site. Each string element of the array is a site ID. The number of
# elements is the number of sites. 
#
# The order and naming of the site IDs should match the prober
# documentation to avoid confusion. The left most entry refers to the
# first prober site, the right most entry refers to the last prober
# site. 

{ The names of the prober sites }

prober_site_ids: < F >                  ["1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45" "46" "47" "48" "49" "50" "51" "52" "53" "54" "55" "56" "57" "58" "59" "60" "61" "62" "63" "64" "65" "66" "67" "68" "69" "70" "71" "72" "73" "74" "75" "76" "77" "78" "79" "80" "81" "82" "83" "84" "85" "86" "87" "88" "89" "90" "91" "92" "93" "94" "95" "96" "97" "98" "99" "100" "101" "102" "103" "104" "105" "106" "107" "108" "109" "110" "111" "112" "113" "114" "115" "116" "117" "118" "119" "120" "121" "122" "123" "124" "125" "126" "127" "128" "129" "130" "131" "132" "133" "134" "135" "136" "137" "138" "139" "140" "141" "142" "143" "144" "145" "146" "147" "148" "149" "150" "151" "152" "153" "154" "155" "156" "157" "158" "159" "160" "161" "162" "163" "164" "165" "166" "167" "168" "169" "170" "171" "172" "173" "174" "175" "176" "177" "178" "179" "180" "181" "182" "183" "184" "185" "186" "187" "188" "189" "190" "191" "192" "193" "194" "195" "196" "197" "198" "199" "200" "201" "202" "203" "204" "205" "206" "207" "208" "209" "210" "211" "212" "213" "214" "215" "216" "217" "218" "219" "220" "221" "222" "223" "224" "225" "226" "227" "228" "229" "230" "231" "232" "233" "234" "235" "236" "237" "238" "239" "240" "241" "242" "243" "244" "245" "246" "247" "248" "249" "250" "251" "252" "253" "254" "255" "256" "257" "258" "259" "260" "261" "262" "263" "264" "265" "266" "267" "268" "269" "270" "271" "272" "273" "274" "275" "276" "277" "278" "279" "280" "281" "282" "283" "284" "285" "286" "287" "288" "289" "290" "291" "292" "293" "294" "295" "296" "297" "298" "299" "300" "301" "302" "303" "304" "305" "306" "307" "308" "309" "310" "311" "312" "313" "314" "315" "316" "317" "318" "319" "320" "321" "322" "323" "324" "325" "326" "327" "328" "329" "330" "331" "332" "333" "334" "335" "336" "337" "338" "339" "340" "341" "342" "343" "344" "345" "346" "347" "348" "349" "350" "351" "352" "353" "354" "355" "356" "357" "358" "359" "360" "361" "362" "363" "364" "365" "366" "367" "368" "369" "370" "371" "372" "373" "374" "375" "376" "377" "378" "379" "380" "381" "382" "383" "384" "385" "386" "387" "388" "389" "390" "391" "392" "393" "394" "395" "396" "397" "398" "399" "400" "401" "402" "403" "404" "405" "406" "407" "408" "409" "410" "411" "412" "413" "414" "415" "416" "417" "418" "419" "420" "421" "422" "423" "424" "425" "426" "427" "428" "429" "430" "431" "432" "433" "434" "435" "436" "437" "438" "439" "440" "441" "442" "443" "444" "445" "446" "447" "448" "449" "450" "451" "452" "453" "454" "455" "456" "457" "458" "459" "460" "461" "462" "463" "464" "465" "466" "467" "468" "469" "470" "471" "472" "473" "474" "475" "476" "477" "478" "479" "480" "481" "482" "483" "484" "485" "486" "487" "488" "489" "490" "491" "492" "493" "494" "495" "496" "497" "498" "499" "500" "501" "502" "503" "504" "505" "506" "507" "508" "509" "510" "511" "512" "513" "514" "515" "516" "517" "518" "519" "520" "521" "522" "523" "524" "525" "526" "527" "528" "529" "530" "531" "532" "533" "534" "535" "536" "537" "538" "539" "540" "541" "542" "543" "544" "545" "546" "547" "548" "549" "550" "551" "552" "553" "554" "555" "556" "557" "558" "559" "560" "561" "562" "563" "564" "565" "566" "567" "568" "569" "570" "571" "572" "573" "574" "575" "576" "577" "578" "579" "580" "581" "582" "583" "584" "585" "586" "587" "588" "589" "590" "591" "592" "593" "594" "595" "596" "597" "598" "599" "600" "601" "602" "603" "604" "605" "606" "607" "608" "609" "610" "611" "612" "613" "614" "615" "616" "617" "618" "619" "620" "621" "622" "623" "624" "625" "626" "627" "628" "629" "630" "631" "632" "633" "634" "635" "636" "637" "638" "639" "640" "641" "642" "643" "644" "645" "646" "647" "648" "649" "650" "651" "652" "653" "654" "655" "656" "657" "658" "659" "660" "661" "662" "663" "664" "665" "666" "667" "668" "669" "670" "671" "672" "673" "674" "675" "676" "677" "678" "679" "680" "681" "682" "683" "684" "685" "686" "687" "688" "689" "690" "691" "692" "693" "694" "695" "696" "697" "698" "699" "700" "701" "702" "703" "704" "705" "706" "707" "708" "709" "710" "711" "712" "713" "714" "715" "716" "717" "718" "719" "720" "721" "722" "723" "724" "725" "726" "727" "728" "729" "730" "731" "732" "733" "734" "735" "736" "737" "738" "739" "740" "741" "742" "743" "744" "745" "746" "747" "748" "749" "750" "751" "752" "753" "754" "755" "756" "757" "758" "759" "760" "761" "762" "763" "764" "765" "766" "767" "768" "769" "770" "771" "772" "773" "774" "775" "776" "777" "778" "779" "780" "781" "782" "783" "784" "785" "786" "787" "788" "789" "790" "791" "792" "793" "794" "795" "796" "797" "798" "799" "800" "801" "802" "803" "804" "805" "806" "807" "808" "809" "810" "811" "812" "813" "814" "815" "816" "817" "818" "819" "820" "821" "822" "823" "824" "825" "826" "827" "828" "829" "830" "831" "832" "833" "834" "835" "836" "837" "838" "839" "840" "841" "842" "843" "844" "845" "846" "847" "848" "849" "850" "851" "852" "853" "854" "855" "856" "857" "858" "859" "860" "861" "862" "863" "864" "865" "866" "867" "868" "869" "870" "871" "872" "873" "874" "875" "876" "877" "878" "879" "880" "881" "882" "883" "884" "885" "886" "887" "888" "889" "890" "891" "892" "893" "894" "895" "896" "897" "898" "899" "900" "901" "902" "903" "904" "905" "906" "907" "908" "909" "910" "911" "912" "913" "914" "915" "916" "917" "918" "919" "920" "921" "922" "923" "924" "925" "926" "927" "928" "929" "930" "931" "932" "933" "934" "935" "936" "937" "938" "939" "940" "941" "942" "943" "944" "945" "946" "947" "948" "949" "950" "951" "952" "953" "954" "955" "956" "957" "958" "959" "960" "961" "962" "963" "964" "965" "966" "967" "968" "969" "970" "971" "972" "973" "974" "975" "976" "977" "978" "979" "980" "981" "982" "983" "984" "985" "986" "987" "988" "989" "990" "991" "992" "993" "994" "995" "996" "997" "998" "999" "1000" "1001" "1002" "1003" "1004" "1005" "1006" "1007" "1008" "1009" "1010" "1011" "1012" "1013" "1014" "1015" "1016" "1017" "1018" "1019" "1020" "1021" "1022" "1023" "1024"]

# This mask tells the driver which of the prober sites are active
# (=1) and which are (currently) deactivated (=0). The mask
# corresponds to prober_site_ids. Telling the driver about
# deactivated sites avoids unnecessary latency delays.

{ Mask of active prober sites, entries may be 0 or 1, default [ 1 1 1 ... ] }

prober_site_mask

# Site mapping (corresponds to prober site IDs):
# Each entry defines the SmarTest site, the corresponding prober site is 
# feeding to. SmarTest site numbers always start with 1 and are
# incremental. I.e. if 4 sites are defined, the SmarTest site numbers
# 1 to 4 must occur in the site mapping, while the order of these
# numbers may vary.
#
# Example:
# Assuming the 'prober_site_ids' are set to                 [ "A" "B" "C" ]
# and the      'smartest_site_to_prober_site_map' is set to [  2   1   3  ]
#
# This situation would result in:
#
# prober site "A" is mapped to SmarTest site 2
# prober site "B" is mapped to SmarTest site 1
# prober site "c" is mapped to SmarTest site 3

{ Mapping of SmarTest sites to prober sites, entries are >= 1, 
  default [ 1 2 3 ... ] }

smartest_site_to_prober_site_map: < F > [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 ]


# Bin management --------------------------------------------------------------


# This parameter selects one of the different ways the driver can map
# SmarTest bins to prober bins:
#
# - "default"
# - "mapped-hardbins"
# - "mapped-softbins"
# - "default_softbin_mapping"
#
# Whenever a device is binned to a specific SmarTest bin, the prober
# will receive the mapped prober bin code for this device. Depending
# on the mapping selected, more or less additional parameters must be
# set, as described below.
#
# "default" and "default_softbin_mapping" is the easiest way to specify the device
# binning. SmarTest's hardbin/softbin numbers are used for a mapping of
# SmarTest bins to prober bins in a straight one to one fashion: The
# SmarTest bin with hardbin/softbin number 0 is mapped to the prober bin 0;
# the SmarTest bin with harbin/softbin number 1 is mapped to the prober bin 1;
# and so on. There are no further parameters to be set.
#
# "mapped-hardbins" provides a method to assign (groups of) SmarTest
# bins to (groups of) prober bins. The hardbin numbers of the
# SmarTest bins are used for bin identification. To use this feature,
# the parameters prober_bin_ids and hardbin_to_prober_bin_map must
# be defined, as explained below.
#
# "mapped-softbins" provides a method to assign (groups of) SmarTest
# bins to (groups of) prober bins. The softbin codes of the SmarTest
# bins are used for bin identification. To use this feature, the
# parameters prober_bin_ids and softbin_to_prober_bin_map must be
# defined, as explained below.

{ Method of SmarTest to prober bin mapping }

bin_mapping: < F >                      "default"

# Holds the IDs of the bins of a prober. The IDs used in the array
# must match the bin names as known to the prober's communication
# protocol. The IDs in the array are used by so-called `message based'
# probers, which identify bins over the GPIB (IEEE-488) or RS232
# interface. When a prober is connected via a GPIB interface, the bin
# IDs are used for message and error logging of the driver, and to
# allow for the `mapped-hardbins' or `mapped-softbins' binning
# modes.
#
# The definition of prober_bin_ids is optional, if the "default" bin
# mapping is used. It is mandatory, if either the "mapped-hardbins" or
# the "mapped-softbins" method is used.

{ The names of the prober bins }

prober_bin_ids: < F >                   [ "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" ]

# Defines the prober bins to be used for unknown test results. A test
# result is unknown, if the device test was skipped.
#
# If the parameter prober_bin_ids IS NOT defined (this is allowed
# when `default' bin mapping is used), the entries of the
# prober_retest_bins definition are directly interpreted as the
# plug-in internal bin numbers (which start with 0). 
#
# If the parameter prober_bin_ids IS defined, the entries of the
# prober_retest_bins definition are interpreted as indices to the
# prober_bin_ids array. Note that the first entry in that array has
# the index number 0)
#
# Some probers bin to a retest bin when they receive an end-of-test
# signal or a binning signal without receiving binning data (which
# specifies the bin). In this case prober_retest_bins must be
# assigned an empty list (prober_retest_bins: [ ]).

{ List of prober retest bin indices, 0 to ..., default: no retest bins }

prober_retest_bins: < F >               [ 31 ]


# Parameters for specific prober functionality --------------------------------


# This parameter determines how the prober stepping is controlled.
# The parameter can be assigned one of the following values:
# 
# - "prober"
# - "smartest"
# - "learnlist"
# 
# With "prober" the prober performs the die stepping automatically and
# sends the position of every tested die to SmarTest. With "smartest"
# the driver tells the prober where to step for every device. The
# stepping pattern is taken from the wafermap of SmarTest.  "learnlist"
# is similar to "smartest", but the complete stepping pattern stored in
# the wafermap of SmarTest is send to the prober before probing
# starts. The prober than follows that pattern and no further stepping
# data is send to the prober for individual dies.
# 
# For all three parameter settings, the wafermap must be defined.
# In the case of "prober" stepping control, the wafermap must match 
# the stepping performed by the prober. Otherwise, TCCT cannot correctly 
# generate the graphical wafer test result display.

{ Who controlls the stepping pattern, default: "smartest" }

stepping_controlled_by: < F >           "prober"

# This parameter determines whether contact test function of prober driver is
# enabled or not. Prober performs contact test to find out Z Contact Height
# automatically and electrically. Z Contact Height is the Z position of prober
# chuck where the die pins(pads) get connected with the needles.

{ Whether contact test function is enabled nor not }

enable_contact_test: <F>                "no"

# In case of multi site probing, the prober driver needs to know the
# relative die positions of all sites with respect to a reference
# site. This reference site is called primary die.  This parameter
# defines a list of X/Y pairs. Each pair represents the relative die
# position of a site with respect to the primary die (the relative
# position of the primary die to itself is 0,0). The list starts with
# site 1, then site 2, and so on. The direction of X and Y axis is as
# defined in the wafermap. The values for X and Y are die count
# positions (not distances). The following examples count X to the right
# and Y to the bottom.
#
# Examples:
#
# multi_site_die_offsets: [ [0 0] [1 1] ]
# This defines a dual site probe setup where the probes of site 2 are
# in relative position 1,1 to the probes of site 1:
#
#            +---+
#            | 1 |
#            +---+---+
#                | 2 |
#                +---+
#
# multi_site_die_offsets: [ [0 0] [1 1] [2 0] [3 1] ]
# This defines a quad site probe setup whith the following site probe layout:
#
#            +---+   +---+
#            | 1 |   | 3 |
#            +---+---+---+---+
#                | 2 |   | 4 |
#                +---+   +---+
#
# If the parameter is not given, a single site probe is assumed

{ relative die positions for multi site probes, default: [ [0 0] ] }

multi_site_die_offsets: < F >           [[0 0] [0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8] [0 9] [0 10] [0 11] [0 12] [0 13] [0 14] [0 15] [0 16] [0 17] [0 18] [0 19] [0 20] [0 21] [0 22] [0 23] [0 24] [0 25] [0 26] [0 27] [0 28] [0 29] [0 30] [0 31] [0 32] [0 33] [0 34] [0 35] [0 36] [0 37] [0 38] [0 39] [0 40] [0 41] [0 42] [0 43] [0 44] [0 45] [0 46] [0 47] [0 48] [0 49] [0 50] [0 51] [0 52] [0 53] [0 54] [0 55] [0 56] [0 57] [0 58] [0 59] [0 60] [0 61] [0 62] [0 63] [0 64] [0 65] [0 66] [0 67] [0 68] [0 69] [0 70] [0 71] [0 72] [0 73] [0 74] [0 75] [0 76] [0 77] [0 78] [0 79] [0 80] [0 81] [0 82] [0 83] [0 84] [0 85] [0 86] [0 87] [0 88] [0 89] [0 90] [0 91] [0 92] [0 93] [0 94] [0 95] [0 96] [0 97] [0 98] [0 99] [0 100] [0 101] [0 102] [0 103] [0 104] [0 105] [0 106] [0 107] [0 108] [0 109] [0 110] [0 111] [0 112] [0 113] [0 114] [0 115] [0 116] [0 117] [0 118] [0 119] [0 120] [0 121] [0 122] [0 123] [0 124] [0 125] [0 126] [0 127] [0 128] [0 129] [0 130] [0 131] [0 132] [0 133] [0 134] [0 135] [0 136] [0 137] [0 138] [0 139] [0 140] [0 141] [0 142] [0 143] [0 144] [0 145] [0 146] [0 147] [0 148] [0 149] [1 0] [1 1] [1 2] [1 3] [1 4] [1 5] [1 6] [1 7] [1 8] [1 9] [1 10] [1 11] [1 12] [1 13] [1 14] [1 15] [1 16] [1 17] [1 18] [1 19] [1 20] [1 21] [1 22] [1 23] [1 24] [1 25] [1 26] [1 27] [1 28] [1 29] [1 30] [1 31] [1 32] [1 33] [1 34] [1 35] [1 36] [1 37] [1 38] [1 39] [1 40] [1 41] [1 42] [1 43] [1 44] [1 45] [1 46] [1 47] [1 48] [1 49] [1 50] [1 51] [1 52] [1 53] [1 54] [1 55] [1 56] [1 57] [1 58] [1 59] [1 60] [1 61] [1 62] [1 63] [1 64] [1 65] [1 66] [1 67] [1 68] [1 69] [1 70] [1 71] [1 72] [1 73] [1 74] [1 75] [1 76] [1 77] [1 78] [1 79] [1 80] [1 81] [1 82] [1 83] [1 84] [1 85] [1 86] [1 87] [1 88] [1 89] [1 90] [1 91] [1 92] [1 93] [1 94] [1 95] [1 96] [1 97] [1 98] [1 99] [1 100] [1 101] [1 102] [1 103] [1 104] [1 105] [1 106] [1 107] [1 108] [1 109] [1 110] [1 111] [1 112] [1 113] [1 114] [1 115] [1 116] [1 117] [1 118] [1 119] [1 120] [1 121] [1 122] [1 123] [1 124] [1 125] [1 126] [1 127] [1 128] [1 129] [1 130] [1 131] [1 132] [1 133] [1 134] [1 135] [1 136] [1 137] [1 138] [1 139] [1 140] [1 141] [1 142] [1 143] [1 144] [1 145] [1 146] [1 147] [1 148] [1 149] [2 0] [2 1] [2 2] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] [2 9] [2 10] [2 11] [2 12] [2 13] [2 14] [2 15] [2 16] [2 17] [2 18] [2 19] [2 20] [2 21] [2 22] [2 23] [2 24] [2 25] [2 26] [2 27] [2 28] [2 29] [2 30] [2 31] [2 32] [2 33] [2 34] [2 35] [2 36] [2 37] [2 38] [2 39] [2 40] [2 41] [2 42] [2 43] [2 44] [2 45] [2 46] [2 47] [2 48] [2 49] [2 50] [2 51] [2 52] [2 53] [2 54] [2 55] [2 56] [2 57] [2 58] [2 59] [2 60] [2 61] [2 62] [2 63] [2 64] [2 65] [2 66] [2 67] [2 68] [2 69] [2 70] [2 71] [2 72] [2 73] [2 74] [2 75] [2 76] [2 77] [2 78] [2 79] [2 80] [2 81] [2 82] [2 83] [2 84] [2 85] [2 86] [2 87] [2 88] [2 89] [2 90] [2 91] [2 92] [2 93] [2 94] [2 95] [2 96] [2 97] [2 98] [2 99] [2 100] [2 101] [2 102] [2 103] [2 104] [2 105] [2 106] [2 107] [2 108] [2 109] [2 110] [2 111] [2 112] [2 113] [2 114] [2 115] [2 116] [2 117] [2 118] [2 119] [2 120] [2 121] [2 122] [2 123] [2 124] [2 125] [2 126] [2 127] [2 128] [2 129] [2 130] [2 131] [2 132] [2 133] [2 134] [2 135] [2 136] [2 137] [2 138] [2 139] [2 140] [2 141] [2 142] [2 143] [2 144] [2 145] [2 146] [2 147] [2 148] [2 149] [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] [3 6] [3 7] [3 8] [3 9] [3 10] [3 11] [3 12] [3 13] [3 14] [3 15] [3 16] [3 17] [3 18] [3 19] [3 20] [3 21] [3 22] [3 23] [3 24] [3 25] [3 26] [3 27] [3 28] [3 29] [3 30] [3 31] [3 32] [3 33] [3 34] [3 35] [3 36] [3 37] [3 38] [3 39] [3 40] [3 41] [3 42] [3 43] [3 44] [3 45] [3 46] [3 47] [3 48] [3 49] [3 50] [3 51] [3 52] [3 53] [3 54] [3 55] [3 56] [3 57] [3 58] [3 59] [3 60] [3 61] [3 62] [3 63] [3 64] [3 65] [3 66] [3 67] [3 68] [3 69] [3 70] [3 71] [3 72] [3 73] [3 74] [3 75] [3 76] [3 77] [3 78] [3 79] [3 80] [3 81] [3 82] [3 83] [3 84] [3 85] [3 86] [3 87] [3 88] [3 89] [3 90] [3 91] [3 92] [3 93] [3 94] [3 95] [3 96] [3 97] [3 98] [3 99] [3 100] [3 101] [3 102] [3 103] [3 104] [3 105] [3 106] [3 107] [3 108] [3 109] [3 110] [3 111] [3 112] [3 113] [3 114] [3 115] [3 116] [3 117] [3 118] [3 119] [3 120] [3 121] [3 122] [3 123] [3 124] [3 125] [3 126] [3 127] [3 128] [3 129] [3 130] [3 131] [3 132] [3 133] [3 134] [3 135] [3 136] [3 137] [3 138] [3 139] [3 140] [3 141] [3 142] [3 143] [3 144] [3 145] [3 146] [3 147] [3 148] [3 149][4 0] [4 1] [4 2] [4 3] [4 4] [4 5] [4 6] [4 7] [4 8] [4 9] [4 10] [4 11] [4 12] [4 13] [4 14] [4 15] [4 16] [4 17] [4 18] [4 19] [4 20] [4 21] [4 22] [4 23] [4 24] [4 25] [4 26] [4 27] [4 28] [4 29] [4 30] [4 31] [4 32] [4 33] [4 34] [4 35] [4 36] [4 37] [4 38] [4 39] [4 40] [4 41] [4 42] [4 43] [4 44] [4 45] [4 46] [4 47] [4 48] [4 49] [4 50] [4 51] [4 52] [4 53] [4 54] [4 55] [4 56] [4 57] [4 58] [4 59] [4 60] [4 61] [4 62] [4 63] [4 64] [4 65] [4 66] [4 67] [4 68] [4 69] [4 70] [4 71] [4 72] [4 73] [4 74] [4 75] [4 76] [4 77] [4 78] [4 79] [4 80] [4 81] [4 82] [4 83] [4 84] [4 85] [4 86] [4 87] [4 88] [4 89] [4 90] [4 91] [4 92] [4 93] [4 94] [4 95] [4 96] [4 97] [4 98] [4 99] [4 100] [4 101] [4 102] [4 103] [4 104] [4 105] [4 106] [4 107] [4 108] [4 109] [4 110] [4 111] [4 112] [4 113] [4 114] [4 115] [4 116] [4 117] [4 118] [4 119] [4 120] [4 121] [4 122] [4 123] [4 124] [4 125] [4 126] [4 127] [4 128] [4 129] [4 130] [4 131] [4 132] [4 133] [4 134] [4 135] [4 136] [4 137] [4 138] [4 139] [4 140] [4 141] [4 142] [4 143] [4 144] [4 145] [4 146] [4 147] [4 148] [4 149] [5 0] [5 1] [5 2] [5 3] [5 4] [5 5] [5 6] [5 7] [5 8] [5 9] [5 10] [5 11] [5 12] [5 13] [5 14] [5 15] [5 16] [5 17] [5 18] [5 19] [5 20] [5 21] [5 22] [5 23] [5 24] [5 25] [5 26] [5 27] [5 28] [5 29] [5 30] [5 31] [5 32] [5 33] [5 34] [5 35] [5 36] [5 37] [5 38] [5 39] [5 40] [5 41] [5 42] [5 43] [5 44] [5 45] [5 46] [5 47] [5 48] [5 49] [5 50] [5 51] [5 52] [5 53] [5 54] [5 55] [5 56] [5 57] [5 58] [5 59] [5 60] [5 61] [5 62] [5 63] [5 64] [5 65] [5 66] [5 67] [5 68] [5 69] [5 70] [5 71] [5 72] [5 73] [5 74] [5 75] [5 76] [5 77] [5 78] [5 79] [5 80] [5 81] [5 82] [5 83] [5 84] [5 85] [5 86] [5 87] [5 88] [5 89] [5 90] [5 91] [5 92] [5 93] [5 94] [5 95] [5 96] [5 97] [5 98] [5 99] [5 100] [5 101] [5 102] [5 103] [5 104] [5 105] [5 106] [5 107] [5 108] [5 109] [5 110] [5 111] [5 112] [5 113] [5 114] [5 115] [5 116] [5 117] [5 118] [5 119] [5 120] [5 121] [5 122] [5 123] [5 124] [5 125] [5 126] [5 127] [5 128] [5 129] [5 130] [5 131] [5 132] [5 133] [5 134] [5 135] [5 136] [5 137] [5 138] [5 139] [5 140] [5 141] [5 142] [5 143] [5 144] [5 145] [5 146] [5 147] [5 148] [5 149] [6 0] [6 1] [6 2] [6 3] [6 4] [6 5] [6 6] [6 7] [6 8] [6 9] [6 10] [6 11] [6 12] [6 13] [6 14] [6 15] [6 16] [6 17] [6 18] [6 19] [6 20] [6 21] [6 22] [6 23] [6 24] [6 25] [6 26] [6 27] [6 28] [6 29] [6 30] [6 31] [6 32] [6 33] [6 34] [6 35] [6 36] [6 37] [6 38] [6 39] [6 40] [6 41] [6 42] [6 43] [6 44] [6 45] [6 46] [6 47] [6 48] [6 49] [6 50] [6 51] [6 52] [6 53] [6 54] [6 55] [6 56] [6 57] [6 58] [6 59] [6 60] [6 61] [6 62] [6 63] [6 64] [6 65] [6 66] [6 67] [6 68] [6 69] [6 70] [6 71] [6 72] [6 73] [6 74] [6 75] [6 76] [6 77] [6 78] [6 79] [6 80] [6 81] [6 82] [6 83] [6 84] [6 85] [6 86] [6 87] [6 88] [6 89] [6 90] [6 91] [6 92] [6 93] [6 94] [6 95] [6 96] [6 97] [6 98] [6 99] [6 100] [6 101] [6 102] [6 103] [6 104] [6 105] [6 106] [6 107] [6 108] [6 109] [6 110] [6 111] [6 112] [6 113] [6 114] [6 115] [6 116] [6 117] [6 118] [6 119] [6 120] [6 121] [6 122] [6 123]]

# Sometimes it is not useful or not desired, that tester sends the
# resulting binning data of a test to the prober. This may be the case
# in situations where tester controls the stepping pattern and/or in
# multi die scenarios with possibly overlapping step patterns. Setting
# this parameter to "yes" suppresses the sending of binning data to the
# prober.
# 
# Note: Some plug-ins may not support this feature, or only in a
# restricted way (for example, only when not probing multiple dies). In
# this case the plug-in will report an error message at start-up, and
# the parameter value must either be changed to "no", or the parameter
# must be removed from the configuration.

{ If set to "yes" tester does not send the bining data to the
prober, default "no" }

dont_bin_dies: < F >                    "no"

# If the prober supports probe needle cleaning, an automatic cleaning
# process may be issued every time after a given number of dies (or
# die groups in case of multi site probing) have been probed and
# tested.
#
# This parameter defines the cleaning rate. If set to 0 or not
# defined, no automatic probe cleaning is done based on probe
# counts. If set to a positive number, an automatic probe cleaning is
# applied after this number of probed dies.
#
# Per die probe needle cleaning may be combined with per wafer or bin
# based probe needle cleaning

{ automatic probe needle cleaning after this number of probed dies }

per_die_probe_cleaning_rate:            0

# If the prober supports probe needle cleaning, an automatic cleaning
# process may be issued every time after a given number of wafers
# have been processed.
#
# This parameter defines the cleaning rate. If set to 0 or not
# defined, no automatic probe cleaning is done based on wafer
# counts. If set to a positive number, an automatic probe cleaning is
# applied after this number of processed wafers.
#
# Per wafer probe needle cleaning may be combined with per die or bin
# based probe needle cleaning

{ automatic probe needle cleaning after this number of processed wafers }

per_wafer_probe_cleaning_rate:          0

# If the prober supports probe needle cleaning, an automatic cleaning
# process may be issued every time a tested die is binned into one of
# a set of given bin categories. By this, probe needle cleaning can be
# controlled based on the actual test result. 
#
# The parameter defines a list of SmarTest hardbins, that should imply
# an automatic probe needle cleaning. If set to empty list or not
# defined, no hardbin based probe needle cleaning applied.
#
# See also parameter probe_cleaning_softbins. Probe needle cleaning
# based on hardbins can NOT be combined with cleaning based on
# softbins, but it may be combined with per die or per wafer probe
# needle cleaning.

{ List of SmarTest hardbins that trigger a probe needle cleaning }

probe_cleaning_hardbins:                [ ]

# If the prober supports probe needle cleaning, an automatic cleaning
# process may be issued every time a tested die is binned into one of
# a set of given bin categories. By this, probe needle cleaning can be
# controlled based on the actual test result. 
#
# The parameter defines a list of SmarTest softbins, that should imply
# an automatic probe needle cleaning. If set to empty list or not
# defined, no softbin based probe needle cleaning applied.
#
# See also parameter probe_cleaning_hardbins. Probe needle cleaning
# based on softbins can NOT be combined with cleaning based on
# hardbins, but it may be combined with per die or per wafer probe
# needle cleaning.

{ List of SmarTest softbins that trigger a probe needle cleaning }

probe_cleaning_softbins:                [ ]


# Plugin specific parameters --------------------------------------------------


# For certain TEL probers the machine ID "?V" query is not a valid query. In 
# such cases the driver will fail during start-up. If this occurs the 
# following configurable value should be set to "no" to prevent the ?V 
# query being sent.

{ If set to "no" then the driver will not send out the ?V machine ID query
  , default "yes" }

tel_send_id_query:                      "yes"

# For certain TEL probers the "VF" command  (unload all wafers and force a 
# lot end) is not a valid command. In such cases the driver will fail if the 
# user decides to quit a currently running session where a wafer is still being
# probed. If this occurs the following configurable value should be set to "no" 
# to prevent the VF command being sent.

{ If set to "no" then the driver will not send out the VF wafer abort command
  , default "yes" }

tel_send_wafer_abort:                   "yes"


# Parameters for Driver Internals ---------------------------------------------

# These parameters control how the driver behaves while waiting for
# new parts to be tested, and when performing a timed sequence of
# actions.


# This parameter is used as communication heartbeat timeout value.

{ Heartbeat timeout value for communications between the tester and equipment, 
  0 to ..., default: 5000 }

flag_check_interval:                    4000

# Only used for debugging: work with simulated SmarTest flags

{ Simulate SmarTest flags, "yes" or "no", default: "no" }

smartest_simulation: < F >              "no"

# Only used for debugging: work with simulated plugin results

{ Simulate plugin results, "yes" or "no", default: "no" }

plugin_simulation: < F >                "no"

# End of File -----------------------------------------------------------------
